#version 410

layout(triangles, equal_spacing, ccw) in;

uniform mat4 mMVP;
uniform sampler2D iDisplacementMap;
uniform float fDispFactor;

in vec3 vPosition_ES[];
in vec2 vUV_ES[];
in vec3 vNormal_ES[];

out vec3 vPosition_FS;
out vec2 vUV_FS;
out vec3 vNormal_FS;

vec2 Interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 Interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
} 

void main()
{
	vUV_FS		 = Interpolate2D(vUV_ES[0], vUV_ES[1], vUV_ES[2]);
	vNormal_FS	 = normalize(Interpolate3D(vNormal_ES[0], vNormal_ES[1], vNormal_ES[2]));
	vPosition_FS = Interpolate3D(vPosition_ES[0], vPosition_ES[1], vPosition_ES[2]);

	float fDisplacement = texture(iDisplacementMap, vUV_FS.xy).x;
	vPosition_FS += vNormal_FS * fDisplacement * fDispFactor;

	gl_Position = mMVP * vec4(vPosition_FS, 1.0);
}